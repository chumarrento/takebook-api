<?php


namespace App\Repositories\Book;


use App\Entities\Book\Book;
use App\Repositories\Repository;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class BookRepository extends Repository
{
    public function __construct()
    {
        $this->model = new Book();
    }

    public function findAll()
    {
        $data = $this->model->where('status_id', 1)->paginate(9);
        return $data;
    }

    public function create(array $data)
    {
        unset($data['status_id']);
        $book = parent::create($data);

        foreach ($data['categories'] as $category) {
            $this->attach($book->id, $category, 'categories');
        }

        foreach ($data['images'] as $image) {
            $fileName = "covers/" . Str::random(16) . "-cover." . $image->getClientOriginalExtension();

            Storage::put($fileName, file_get_contents($image));

            $book->images()->create([
                'cover' => $fileName
            ]);
        }

        return $book;
    }

    public function update(array $data, $id)
    {
        if (!Auth::user()->is_admin) {
            unset($data['status_id']);
            unset($data['approved_at']);
        }
        return parent::update($data, $id); // TODO: Change the autogenerated stub
    }

    public function delete($id)
    {
        $book = $this->model->find($id);
        if ($book->user_id !== Auth::user()->getAuthIdentifier()) {
            return false;
        }
        $images = $book->images;
        if ($images) {
            foreach ($images as $image) {
                if (Storage::exists($image->cover)) {
                    Storage::delete($image->cover);
                }
            }
        }
        return parent::delete($id); // TODO: Change the autogenerated stub
    }

    public function attach($idParent, $idChild, $relation, $data = [])
    {
        return parent::attach($idParent, $idChild, $relation, $data); // TODO: Change the autogenerated stub
    }
}
